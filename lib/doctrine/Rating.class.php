<?php
/**
 * Copyright (c) 2010 NetService.ru, Andrei Dziahel aka develop7 <develop7@develop7.info>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Rating Doctrine_Record's generator
 *
 * @author Andrei Dziahel <develop7@develop7.info>
 * @author Vitaly Alyokhin <228vit@gmail.com>
 */
class Doctrine_Rating extends Doctrine_Record_Generator
{
  protected $_options = array(
    'className'     => '%CLASS%Rating',
    'tableName'     => false,
    'generateFiles' => false,
    'table'         => false,
    'pluginTable'   => false,
    'children'      => array(),
    'options'       => array(),
  );

  /**
   * __construct
   *
   * @param string $options
   * @return void
   */
  public function __construct($options)
  {
    $this->_options = Doctrine_Lib::arrayDeepMerge($this->_options, $options);
  }

  public function buildRelation()
  {
    $this->buildLocalRelations();
    $this->buildForeignRelations();
  }

  /**
   * buildForeignKeys
   *
   * generates foreign keys for the plugin table based on the owner table
   *
   * the foreign keys generated by this method can be used for
   * setting the relations between the owner and the plugin classes
   *
   * @param Doctrine_Table $table     the table object that owns the plugin
   * @return array                    an array of foreign key definitions
   */
  public function buildForeignKeys(Doctrine_Table $table)
  {
    $fk = array();

    foreach (
      array('component_id' => $table, 'owner_id' => $this->_options['owner_table'])
        as $name => $t)
    {
      $n = $this->_options[$name];
      $def = $t->getDefinitionOf($n['local']);

      unset($def['autoincrement']);
      unset($def['sequence']);

      $def['primary'] = true;
      $fk[$this->_options[$name]['foreign']] = $def;
    }

    return $fk;
  }

  /**
   * Binds this component to related components
   *
   * @todo Move 'Votes' alias to options
   *
   * @return void
   */
  public function buildForeignRelations()
  {
    $options = array('foreign'    => $this->_options['component_id']['foreign'],
      'local'  => $this->_options['component_id']['local'],
      'type'     => Doctrine_Relation::MANY);

    $this->_options['table']->getRelationParser()->bind(
      $this->_table->getClassnameToReturn(),
      $options);

    $options = array('foreign'    => $this->_options['owner_id']['foreign'],
      'local'  => $this->_options['owner_id']['local'],
      'type'     => Doctrine_Relation::MANY);

    $this->_options['owner_table']->getRelationParser()->bind(
        $this->_table->getClassnameToReturn() . ' as ' . $this->_options['table']->getClassnameToReturn() . 'Votes',
        $options);
  }

  /**
   * Binds related components to this component
   *
   * @return void
   */
  public function buildLocalRelations()
  {
    $options = array('foreign'      => $this->_options['component_id']['local'],
                     'local'    => $this->_options['component_id']['foreign'],
                     'type'       => Doctrine_Relation::ONE,
                     'owningSide' => true);

    $options['onDelete'] = 'CASCADE';
    $options['onUpdate'] = 'CASCADE';

    $this->_table->getRelationParser()->bind($this->_options['table']->getClassnameToReturn(), $options);

    $options = array('foreign'    => $this->_options['owner_id']['local'],
                     'local'      => $this->_options['owner_id']['foreign'],
                     'type'       => Doctrine_Relation::ONE,
                     'owningSide' => true);

    $options['onDelete'] = 'CASCADE';
    $options['onUpdate'] = 'CASCADE';

    $this->_table->getRelationParser()->bind($this->_options['table']->getClassnameToReturn(), $options);
  }

  /**
   * Sets up rating component columns and indexes
   *
   * @param object $Doctrine_Table
   * @return void
   */
  public function setTableDefinition()
  {
    $options = $this->_options['rating_column'];

    $this->hasColumn($options['name'],
        $options['type'],
        $options['size'],
        array('unsigned' => $options['unsigned']));

    $this->index('rate', array('fields' => array($this->_options['component_id']['foreign'], 'rate')));
  }
}
